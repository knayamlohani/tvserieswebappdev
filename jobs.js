// Generated by CoffeeScript 1.8.0
(function() {
  var mailer, moment, mongodbclient;

  mongodbclient = require('./mongodbclient.js');

  moment = require('moment');

  mailer = require('./mailer.js');

  exports.performJobs = function() {
    var generateJobs, getDaysNameFor, getMailSubscriptionJobsForToday, mailSubscriptionsFor;
    setInterval(function() {}, 30 * 60);
    setInterval(function() {
      mongodbclient.deleteExpiredPasswordResetTokens("", function(result) {
        console.log(result);
      });
      mongodbclient.deleteExpiredAccountAuthenticationTokens("", function(result) {
        console.log(result);
      });
      return;
      mongodbclient.deleteFinishedJobs("", function(result) {
        console.log(result);
      });
    }, 10 * 60 * 1000);

    /*
      to check if mail subscriptions jobs for today were created
      if not create them
      
      a table(jobs created status) is maintained which keeps track of various jobs like mail subscriptions, mail newslatter, etc
      if there is an entry for mail subscriptions for today in the table, implies mail subscriptions jobs are already created
      else mail subscriptions jobs will be created(ie added to jobs table) and an entry will will be added to jobsCreatedStatus table
      for todays mail subscription jobs
    
      runs every half and hour
     */
    setInterval(function() {
      var options;
      options = {
        "object": {
          "type": "mailSubscriptions",
          "date": moment.utc().format("MM-DD-YYYY").toString()
        }
      };
      mongodbclient.checkIfJobsCreated(options, function(result) {
        if (!result.err && !result.status) {
          console.log("jobs not created for today");
          generateJobs(moment.utc().format().toString(), function(result) {
            console.log("created mail subscription jobs for today and now adding an entry to jobscreatedstatus table for mailsubscriptions jobs", result);
            mongodbclient.addEntryToJobsCreatedStatusCollection(options, function(result) {
              console.log("entry added to jobsCreatedStatus collection", result);
            });
          });
        } else {
          console.log("jobs already created for today");
        }
      });
    }, 1 * 60 * 1000);

    /*
    checks every 10 minutes for pending jobs (mailing subscriptions)
     */
    setInterval(function() {
      console.log("sending mailSubscriptions");
      getMailSubscriptionJobsForToday();
    }, 1 * 60 * 1000);
    generateJobs = function(utcDateString, callback) {
      var currentDay, days, jobs, options;
      days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      currentDay = days[moment(utcDateString).utc().day()];
      jobs = [];
      console.log("currentDay", currentDay);
      options = {
        "object": {
          "airsOnDayOfWeek": currentDay
        }
      };
      mongodbclient.getTvShowsAiringOn(options, function(result) {
        var deliveryTime, job, sixAM, tvShow, _i, _len, _ref;
        _ref = result.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tvShow = _ref[_i];
          sixAM = moment(utcDateString).utc().hours(6).minutes(0).seconds(0).format().toString();
          deliveryTime = moment(sixAM).utc().subtract(tvShow.subscribersTimeZone, 'hours').utc().format().toString();
          job = {
            "email": tvShow.subscribersEmail,
            "deliveryTime": deliveryTime,
            "status": "queue",
            "day": tvShow.airsOnDayOfWeek,
            "type": "mailSubscriptions"
          };
          jobs.push(job);
        }
        console.log("jobs", jobs);
        mongodbclient.addNewJob(options = {
          "object": job
        }, callback);
      });
    };
    getMailSubscriptionJobsForToday = function() {
      var dayOfWeek, options, utcDate, utcDateString;
      utcDate = moment.utc().format();
      console.log("utcDate", utcDate);
      utcDateString = utcDate.toString();
      dayOfWeek = getDaysNameFor(moment(utcDateString).utc().day());
      console.log("today is", dayOfWeek);
      options = {
        "object": {
          "day": dayOfWeek,
          "status": "queue"
        }
      };
      mongodbclient.getMailSubscriptionJobs(options, function(result) {
        var data, job, _i, _len, _ref;
        console.log("result", result);
        data = result.data;
        _ref = result.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          job = _ref[_i];
          if (moment(utcDateString) - moment(job.deliveryTime) >= 0) {
            (function(job) {
              console.log("mailing subscriptions for", job.email);
              mailSubscriptionsFor({
                "email": job.email,
                "day": job.day
              }, function(result) {
                console.log("mailed subscriptions for ", job.email, "result", result);
                mongodbclient.updateDocumentInCollection(options = {
                  "object": {
                    "searchParameter": {
                      "email": job.email
                    },
                    "updatedValue": {
                      "status": "finished"
                    }
                  },
                  "collection": "jobs"
                }, function(result) {
                  console.log("updated job status to finished, result ", result);
                });
              });
            })(job);
          }
        }
      });
    };
    mailSubscriptionsFor = function(subscriber, callback) {
      var options;
      options = {
        "object": {
          "airsOnDayOfWeek": subscriber.day,
          "subscribersEmail": subscriber.email
        }
      };
      console.log("mailing subscriptions");
      mongodbclient.getTvShowsAiringOn(options, function(result) {
        var allUsers, subscribers, temp, tvShow, user, _i, _j, _len, _len1, _ref;
        subscribers = {};
        allUsers = [];
        temp = [];
        _ref = result.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tvShow = _ref[_i];
          if (!subscribers[tvShow.subscribersUsername]) {
            subscribers[tvShow.subscribersUsername] = {};
            subscribers[tvShow.subscribersUsername].tvShows = [];
            subscribers[tvShow.subscribersUsername].email = tvShow.subscribersEmail;
            subscribers[tvShow.subscribersUsername].username = tvShow.subscribersUsername;
            subscribers[tvShow.subscribersUsername].name = tvShow.subscribersFirstName + " " + tvShow.subscribersLastName;
            allUsers.push(tvShow.subscribersUsername);
          }
          subscribers[tvShow.subscribersUsername].tvShows.push({
            "name": tvShow.name,
            "id": tvShow.id,
            "artworkUrl": tvShow.artworkUrl
          });
        }
        for (_j = 0, _len1 = allUsers.length; _j < _len1; _j++) {
          user = allUsers[_j];
          temp.push({
            "email": subscribers[user].email,
            "name": subscribers[user].name,
            "username": subscribers[user].username,
            "tvShows": subscribers[user].tvShows
          });
        }
        console.log(JSON.stringify(temp, null, 4));
        mailer.mailSubscriptions(temp, callback);
      });
    };
    getDaysNameFor = function(dayNo) {
      var days;
      days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      return days[dayNo];
    };
  };

}).call(this);


//# sourceMappingURL=jobs.js.map
