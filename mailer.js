// Generated by CoffeeScript 1.8.0
(function() {
  var crypto, emailAccount, emailTemplates, generateHashFromTokenAndMailResetLink, generateToken, mongodbclient, nodemailer, path, templatesDir;

  path = require('path');

  templatesDir = path.resolve(__dirname, 'templates');

  emailTemplates = require('email-templates');

  nodemailer = require('nodemailer');

  crypto = require('crypto');

  mongodbclient = require('./mongodbclient.js');

  emailAccount = {
    "username": null,
    "password": null
  };

  exports.setEmailAccount = function(account) {
    emailAccount.username = account.username;
    emailAccount.password = account.password;
  };

  exports.mailSubscriptions = function(subscribers, callback) {
    emailTemplates(templatesDir, function(err, template) {
      var Render, transportBatch, users;
      console.log("email templates");
      if (err) {
        console.log(err);
      } else {
        console.log("no error");
        transportBatch = nodemailer.createTransport("SMTP", {
          service: "Gmail",
          auth: {
            user: emailAccount.username,
            pass: emailAccount.password
          },
          debug: true
        });
        users = subscribers;
        Render = function(locals) {
          this.locals = locals;
          this.send = function(err, html, text) {
            if (err) {
              console.log(err);
            } else {
              console.log("transportBatch");
              transportBatch.sendMail({
                from: 'TV Series <tvserieswebapp@gmail.com>',
                to: locals.email,
                subject: 'TV Shows airing toady',
                html: html,
                generateTextFromHTML: true,
                text: text
              }, function(err, responseStatus) {
                if (err) {
                  console.log(err);
                } else {
                  console.log(responseStatus.message);
                }
                callback({
                  "err": err,
                  "status": "",
                  "data": responseStatus
                });
              });
            }
          };
          this.batch = function(batch) {
            batch(this.locals, templatesDir, this.send);
          };
        };
        template('subscriptions', true, function(err, batch) {
          var render, user, _i, _len;
          for (_i = 0, _len = users.length; _i < _len; _i++) {
            user = users[_i];
            render = new Render(user);
            render.batch(batch);
          }
        });
      }
    });
  };

  exports.mailPasswordResetLinkTo = function(email) {
    console.log("sending password reset link");
    generateToken(email, generateHashFromTokenAndMailResetLink);
  };

  generateToken = function(email, callback) {
    crypto.randomBytes(32, function(ex, buf) {
      var token;
      token = buf.toString('hex');
      callback(email, token);
    });
  };

  generateHashFromTokenAndMailResetLink = function(email, token) {
    var body, expires, hashValue, mailOptions, shasum, transporter;
    shasum = crypto.createHash('sha1');
    shasum.update(token);
    hashValue = shasum.digest('hex');
    console.log("token", token);
    console.log("hashValue", hashValue);
    console.log("email", email);
    expires = new Date();
    expires.setMinutes(expires.getMinutes() + 30);
    mongodbclient.storePasswordChangeRequest({
      "token": hashValue,
      "expires": expires,
      "email": email
    }, function(data) {
      console.log("reset password data", data);
    });
    transporter = nodemailer.createTransport('SMTP', {
      service: 'Gmail',
      auth: {
        user: emailAccount.username,
        pass: emailAccount.password
      }
    });
    body = "<a href='http://webapp.tvseries.dev/resetPassword?token=" + token + "'> http://webapp.tvseries.dev/resetPassword?token=" + token + " </a>";
    mailOptions = {
      from: 'TV Series <tvserieswebapp@gmail.com>',
      to: email,
      subject: 'Reset password',
      text: 'Click the link below to reset your password',
      html: body
    };
    transporter.sendMail(mailOptions, function(error, info) {
      if (error) {
        console.log(error);
      } else {
        console.log('Message sent: ' + JSON.stringify(info));
      }
    });
  };

  exports.sendMail = function(mailOptions, callback) {
    var transporter;
    transporter = nodemailer.createTransport('SMTP', {
      service: 'Gmail',
      auth: {
        user: emailAccount.username,
        pass: emailAccount.password
      }
    });
    transporter.sendMail(mailOptions, function(error, info) {
      if (error) {
        console.log(error);
      } else {
        console.log('Message sent: ' + JSON.stringify(info));
      }
      callback({
        "err": error,
        "status": error ? true : false,
        "data": info
      });
    });
  };

}).call(this);


//# sourceMappingURL=mailer.js.map
